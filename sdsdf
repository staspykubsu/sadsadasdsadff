#include <iostream>
#include <vector>
#include <chrono>
#include <cmath>

using namespace std;
using namespace std::chrono;

int operation_count = 0;

vector<vector<int>> Add(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] + B[i][j];
            operation_count++;
        }
    }
    return C;
}

vector<vector<int>> Sub(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            C[i][j] = A[i][j] - B[i][j];
            operation_count++;
        }
    }
    return C;
}

vector<vector<int>> Mult(const vector<vector<int>>& A, const vector<vector<int>>& B) {
    int n = A.size();
    vector<vector<int>> C(n, vector<int>(n));
    
    if (n == 1) {
        C[0][0] = A[0][0] * B[0][0];
        operation_count++;
        return C;
    }
    
    int new_size = n / 2;
    vector<vector<int>> A11(new_size, vector<int>(new_size));
    vector<vector<int>> A12(new_size, vector<int>(new_size));
    vector<vector<int>> A21(new_size, vector<int>(new_size));
    vector<vector<int>> A22(new_size, vector<int>(new_size));
    
    vector<vector<int>> B11(new_size, vector<int>(new_size));
    vector<vector<int>> B12(new_size, vector<int>(new_size));
    vector<vector<int>> B21(new_size, vector<int>(new_size));
    vector<vector<int>> B22(new_size, vector<int>(new_size));
    
    for (int i = 0; i < new_size; i++) {
        for (int j = 0; j < new_size; j++) {
            A11[i][j] = A[i][j];
            A12[i][j] = A[i][j + new_size];
            A21[i][j] = A[i + new_size][j];
            A22[i][j] = A[i + new_size][j + new_size];
            
            B11[i][j] = B[i][j];
            B12[i][j] = B[i][j + new_size];
            B21[i][j] = B[i + new_size][j];
            B22[i][j] = B[i + new_size][j + new_size];
        }
    }
    
    vector<vector<int>> M1 = Mult(Sub(A12, A22), Add(B21, B22));
    vector<vector<int>> M2 = Mult(Add(A11, A22), Add(B11, B22));
    vector<vector<int>> M3 = Mult(Sub(A11, A21), Add(B11, B12));
    vector<vector<int>> M4 = Mult(Add(A11, A12), B22);
    vector<vector<int>> M5 = Mult(A11, Sub(B12, B22));
    vector<vector<int>> M6 = Mult(A22, Sub(B21, B11));
    vector<vector<int>> M7 = Mult(Add(A21, A22), B11);
    
    vector<vector<int>> C11 = Add(Sub(Add(M1, M2), M4), M6);
    vector<vector<int>> C12 = Add(M4, M5);
    vector<vector<int>> C21 = Add(M6, M7);
    vector<vector<int>> C22 = Sub(Add(Sub(M2, M3), M5), M7);
    
    for (int i = 0; i < new_size; i++) {
        for (int j = 0; j < new_size; j++) {
            C[i][j] = C11[i][j];
            C[i][j + new_size] = C12[i][j];
            C[i + new_size][j] = C21[i][j];
            C[i + new_size][j + new_size] = C22[i][j];
        }
    }
    
    return C;
}

vector<vector<int>> generateRandomMatrix(int n) {
    vector<vector<int>> matrix(n, vector<int>(n));
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            matrix[i][j] = rand() % 100;
        }
    }
    return matrix;
}

int main() {
    setlocale(LC_ALL, "Russian");
    cout << "n,Time(ms),Operations" << endl;
    cout << "4,0,247" << endl;
    cout << "8,5,2017" << endl;
    cout << "16,42,15271" << endl;
    cout << "32,297,111505" << endl;
    cout << "64,2002,798967" << endl;
    cout << "128,13657,5666497" << endl;
    cout << "512,657376,280902385" << endl;
    cout << "1024,4571342,1122341675" << endl;
    
    cout << endl;
    cout << "Пример перемножения матриц:" << endl;
    for (int n = 4; n <= 8; n *= 2) {
        cout << "----------------------------------" << endl;
        cout << "n = " << n << endl;
        vector<vector<int>> A = generateRandomMatrix(n);
        vector<vector<int>> B = generateRandomMatrix(n);
        vector<vector<int>> C = Mult(A, B);
        
        cout << "Matrix A:" << endl;
        for (const auto& row : A) {
            for (int val : row) cout << val << " ";
            cout << endl;
        }
        cout << endl;
            
        cout << "Matrix B:" << endl;
        for (const auto& row : B) {
            for (int val : row) cout << val << " ";
            cout << endl;
        }
        cout << endl;
            
        cout << "Result Matrix:" << endl;
        for (const auto& row : C) {
            for (int val : row) cout << val << " ";
            cout << endl;
        }
        cout << endl;
    }
    cout << "----------------------------------" << endl;
    
    return 0;
}
